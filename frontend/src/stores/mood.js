import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { moodApi } from '../api/mood'

export const useMoodStore = defineStore('mood', () => {
  // Áä∂ÊÄÅ
  const moods = ref([])
  const todayMood = ref(null)
  const moodStats = ref(null)
  const calendarData = ref(null)
  const loading = ref(false)

  // ÂøÉÊÉÖÈÖçÁΩÆ
  const moodConfig = ref({
    happy: { color: '#FCD34D', icon: 'üòä', label: 'ÂºÄÂøÉ', gradient: 'from-yellow-100 to-yellow-200' },
    calm: { color: '#93C5FD', icon: 'üòå', label: 'Âπ≥Èùô', gradient: 'from-blue-100 to-blue-200' },
    anxious: { color: '#C4B5FD', icon: 'üò∞', label: 'ÁÑ¶Ëôë', gradient: 'from-purple-100 to-purple-200' },
    sad: { color: '#9CA3AF', icon: 'üò¢', label: '‰º§ÂøÉ', gradient: 'from-gray-100 to-gray-200' },
    angry: { color: '#F87171', icon: 'üò†', label: 'ÊÑ§ÊÄí', gradient: 'from-red-100 to-red-200' },
    custom: { color: '#86EFAC', icon: 'üí≠', label: 'Ëá™ÂÆö‰πâ', gradient: 'from-green-100 to-green-200' }
  })

  // ËÆ°ÁÆóÂ±ûÊÄß
  const hasMoods = computed(() => moods.value.length > 0)
  const hasTodayMood = computed(() => !!todayMood.value)
  const moodTypes = computed(() => Object.keys(moodConfig.value))

  // Ëé∑Âèñ‰ªäÊó•ÂøÉÊÉÖ
  const fetchTodayMood = async () => {
    try {
      const response = await moodApi.getTodayMood()

      if (response.success) {
        todayMood.value = response.mood
        return { success: true }
      } else {
        todayMood.value = null
        return { success: false }
      }
    } catch (error) {
      todayMood.value = null
      return { success: false }
    }
  }

  // ÂàõÂª∫ÂøÉÊÉÖËÆ∞ÂΩï
  const createMood = async (moodData) => {
    loading.value = true
    try {
      const response = await moodApi.createMood(moodData)

      if (response.success) {
        todayMood.value = response.mood
        moods.value.unshift(response.mood)
        return { success: true, mood: response.mood }
      } else {
        throw new Error(response.message || 'ËÆ∞ÂΩïÂøÉÊÉÖÂ§±Ë¥•')
      }
    } catch (error) {
      return { success: false, message: error.message }
    } finally {
      loading.value = false
    }
  }

  // Êõ¥Êñ∞ÂøÉÊÉÖËÆ∞ÂΩï
  const updateMood = async (id, moodData) => {
    loading.value = true
    try {
      const response = await moodApi.updateMood(id, moodData)

      if (response.success) {
        // Êõ¥Êñ∞‰ªäÊó•ÂøÉÊÉÖ
        if (todayMood.value?.id === id) {
          todayMood.value = response.mood
        }
        // Êõ¥Êñ∞ÂàóË°®‰∏≠ÁöÑÂøÉÊÉÖ
        const index = moods.value.findIndex(mood => mood.id === id)
        if (index !== -1) {
          moods.value[index] = response.mood
        }
        return { success: true, mood: response.mood }
      } else {
        throw new Error(response.message || 'Êõ¥Êñ∞ÂøÉÊÉÖÂ§±Ë¥•')
      }
    } catch (error) {
      return { success: false, message: error.message }
    } finally {
      loading.value = false
    }
  }

  // Ëé∑ÂèñÂøÉÊÉÖÂéÜÂè≤
  const fetchMoodHistory = async (page = 1, limit = 30) => {
    loading.value = true
    try {
      const response = await moodApi.getMoodHistory(page, limit)

      if (response.success) {
        if (page === 1) {
          moods.value = response.moods
        } else {
          moods.value.push(...response.moods)
        }
        return { success: true, moods: response.moods, hasMore: response.has_more }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÂøÉÊÉÖÂéÜÂè≤Â§±Ë¥•')
      }
    } catch (error) {
      return { success: false, message: error.message }
    } finally {
      loading.value = false
    }
  }

  // Ëé∑ÂèñÂøÉÊÉÖÁªüËÆ°
  const fetchMoodStats = async (period = 'week') => {
    try {
      const response = await moodApi.getMoodStats(period)

      if (response.success) {
        moodStats.value = response.stats
        return { success: true }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÂøÉÊÉÖÁªüËÆ°Â§±Ë¥•')
      }
    } catch (error) {
      moodStats.value = null
      return { success: false, message: error.message }
    }
  }

  // Ëé∑ÂèñÂøÉÊÉÖÊó•ÂéÜÊï∞ÊçÆ
  const fetchMoodCalendar = async (year, month) => {
    try {
      const response = await moodApi.getMoodCalendar(year, month)

      if (response.success) {
        calendarData.value = response.calendar_data
        return { success: true, calendarData: response.calendar_data }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÂøÉÊÉÖÊó•ÂéÜÂ§±Ë¥•')
      }
    } catch (error) {
      calendarData.value = null
      return { success: false, message: error.message }
    }
  }

  // Ëé∑ÂèñÁâπÂÆöÊó•ÊúüÁöÑÂøÉÊÉÖ
  const fetchMoodByDate = async (date) => {
    try {
      const response = await moodApi.getMoodByDate(date)

      if (response.success) {
        return { success: true, moods: response.moods }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÊó•ÊúüÂøÉÊÉÖÂ§±Ë¥•')
      }
    } catch (error) {
      return { success: false, message: error.message }
    }
  }

  // Âà†Èô§ÂøÉÊÉÖËÆ∞ÂΩï
  const deleteMood = async (id) => {
    loading.value = true
    try {
      const response = await moodApi.deleteMood(id)

      if (response.success) {
        // ‰ªéÂàóË°®‰∏≠ÁßªÈô§
        moods.value = moods.value.filter(mood => mood.id !== id)
        // Â¶ÇÊûúÂà†Èô§ÁöÑÊòØ‰ªäÊó•ÂøÉÊÉÖÔºåÊ∏ÖÁ©∫‰ªäÊó•ÂøÉÊÉÖ
        if (todayMood.value?.id === id) {
          todayMood.value = null
        }
        return { success: true }
      } else {
        throw new Error(response.message || 'Âà†Èô§ÂøÉÊÉÖËÆ∞ÂΩïÂ§±Ë¥•')
      }
    } catch (error) {
      return { success: false, message: error.message }
    } finally {
      loading.value = false
    }
  }

  // Ëé∑ÂèñÂøÉÊÉÖÈÖçÁΩÆ
  const getMoodConfig = (moodType) => {
    return moodConfig.value[moodType] || moodConfig.value.custom
  }

  // Ëé∑ÂèñÂøÉÊÉÖÂº∫Â∫¶ÊñáÊú¨
  const getIntensityText = (intensity) => {
    if (intensity <= 3) return 'Âπ≥Èùô'
    if (intensity <= 6) return '‰∏≠Á≠â'
    if (intensity <= 8) return 'ËæÉÂº∫'
    return 'Âº∫ÁÉà'
  }

  // Ëé∑ÂèñÂøÉÊÉÖÂº∫Â∫¶È¢úËâ≤
  const getIntensityColor = (intensity) => {
    if (intensity <= 3) return 'text-blue-500'
    if (intensity <= 6) return 'text-yellow-500'
    if (intensity <= 8) return 'text-orange-500'
    return 'text-red-500'
  }

  // ËÆ°ÁÆóÂøÉÊÉÖÂàÜÂ∏É
  const calculateMoodDistribution = (moodList) => {
    const distribution = {}
    const total = moodList.length

    moodList.forEach(mood => {
      if (!distribution[mood.mood_type]) {
        distribution[mood.mood_type] = 0
      }
      distribution[mood.mood_type]++
    })

    // ËΩ¨Êç¢‰∏∫ÁôæÂàÜÊØî
    Object.keys(distribution).forEach(type => {
      distribution[type] = Math.round((distribution[type] / total) * 100)
    })

    return distribution
  }

  // ËÆ°ÁÆóÂπ≥ÂùáÂøÉÊÉÖÂº∫Â∫¶
  const calculateAverageIntensity = (moodList) => {
    if (moodList.length === 0) return 0

    const totalIntensity = moodList.reduce((sum, mood) => sum + mood.intensity, 0)
    return Math.round(totalIntensity / moodList.length)
  }

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (date, format = 'YYYY-MM-DD') => {
    const d = new Date(date)
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')

    return format
      .replace('YYYY', year)
      .replace('MM', month)
      .replace('DD', day)
  }

  // ÈáçÁΩÆÁä∂ÊÄÅ
  const resetState = () => {
    moods.value = []
    todayMood.value = null
    moodStats.value = null
    calendarData.value = null
    loading.value = false
  }

  return {
    // Áä∂ÊÄÅ
    moods,
    todayMood,
    moodStats,
    calendarData,
    loading,
    moodConfig,

    // ËÆ°ÁÆóÂ±ûÊÄß
    hasMoods,
    hasTodayMood,
    moodTypes,

    // ÊñπÊ≥ï
    fetchTodayMood,
    createMood,
    updateMood,
    fetchMoodHistory,
    fetchMoodStats,
    fetchMoodCalendar,
    fetchMoodByDate,
    deleteMood,
    getMoodConfig,
    getIntensityText,
    getIntensityColor,
    calculateMoodDistribution,
    calculateAverageIntensity,
    formatDate,
    resetState
  }
})